{"version":3,"sources":["Navbar.js","VendingMachine.js","Snack.js","Special.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","exact","to","VendingMachine","Snack","snack","snackIcon","useState","snacks","setSnack","length","map","s","index","key","onClick","Special","width","height","src","frameborder","allow","allowfullscreen","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wUA8BeA,G,MA3BA,WACb,OACE,6BACE,yBAAKC,UAAU,uBACb,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,QAGA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,UAAlB,SAGA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,YAAlB,WAGA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,UAAlB,SAGA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,eAAlB,cAGA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,YAAlB,eCUOC,G,MA5BQ,WACrB,OACE,yBAAKH,UAAU,mBACb,yBAAKA,UAAU,6BACb,+CAEA,4BACE,4BACE,kBAAC,IAAD,CAAME,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,eAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,iB,gBCMGE,G,MA1BD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAAgB,EACXC,mBAAS,IADE,mBAC/BC,EAD+B,KACvBC,EADuB,KAOtC,OACE,6BACE,4BACGJ,EADH,MACaG,EAAOE,QAGpB,yBAAKV,UAAU,mBACZQ,EAAOG,KAAI,SAACC,EAAGC,GAAJ,OACV,0BAAMC,IAAKD,GAAQP,OAGvB,yBAAKN,UAAU,oBACb,4BAAQe,QAhBG,WACfN,GAAS,SAACG,GAAD,4BAAWA,GAAX,CAAcN,SAenB,OAAgCD,GAChC,kBAAC,IAAD,CAAMH,GAAG,KAAT,YCFOc,EAnBC,WACd,OACE,6BACE,uCACA,4BACEC,MAAM,MACNC,OAAO,MACPC,IAAI,4CACJC,YAAY,IACZC,MAAM,0EACNC,iBAAe,IAEjB,6BACE,kBAAC,IAAD,CAAMpB,GAAG,KAAT,W,MCqBOqB,MA5Bf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACuB,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOvB,OAAK,EAACuB,KAAK,UAChB,kBAAC,EAAD,CAAOnB,MAAM,QAAQC,UAAU,kBAEjC,kBAAC,IAAD,CAAOL,OAAK,EAACuB,KAAK,YAChB,kBAAC,EAAD,CAAOnB,MAAM,UAAUC,UAAU,kBAEnC,kBAAC,IAAD,CAAOL,OAAK,EAACuB,KAAK,UAChB,kBAAC,EAAD,CAAOnB,MAAM,QAAQC,UAAU,kBAEjC,kBAAC,IAAD,CAAOL,OAAK,EAACuB,KAAK,eAChB,kBAAC,EAAD,CAAOnB,MAAM,aAAaC,UAAU,kBAEtC,kBAAC,IAAD,CAAOL,OAAK,EAACuB,KAAK,YAChB,kBAAC,EAAD,UClBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.35bc95e9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Navbar.css';\r\nconst Navbar = () => {\r\n  return (\r\n    <div>\r\n      <nav className='vending-machine-nav'>\r\n        <NavLink exact to='/'>\r\n          Home\r\n        </NavLink>\r\n        <NavLink exact to='/bento'>\r\n          Bento\r\n        </NavLink>\r\n        <NavLink exact to='/onigiri'>\r\n          onigiri\r\n        </NavLink>\r\n        <NavLink exact to='/ramen'>\r\n          Ramen\r\n        </NavLink>\r\n        <NavLink exact to='/narutomaki'>\r\n          Narutomaki\r\n        </NavLink>\r\n        <NavLink exact to='/special'>\r\n          Special\r\n        </NavLink>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './VendingMachine.css';\r\n\r\nconst VendingMachine = () => {\r\n  return (\r\n    <div className='vending-machine'>\r\n      <div className='vending-machine-container'>\r\n        <h2>Vending Maching</h2>\r\n\r\n        <ul>\r\n          <li>\r\n            <Link to='/bento'>Bento</Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/onigiri'>Onigiri</Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/ramen'>Ramen</Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/narutomaki'>Narutomaki</Link>\r\n          </li>\r\n          <li>\r\n            <Link to='/special'>Special</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VendingMachine;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Snack.css';\r\n\r\nconst Snack = ({ snack, snackIcon }) => {\r\n  const [snacks, setSnack] = useState([]);\r\n\r\n  const addSnack = () => {\r\n    setSnack((s) => [...s, snackIcon]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        {snack} # {snacks.length}\r\n      </h2>\r\n\r\n      <div className='snack-container'>\r\n        {snacks.map((s, index) => (\r\n          <span key={index}>{snackIcon}</span>\r\n        ))}\r\n      </div>\r\n      <div className='button-container'>\r\n        <button onClick={addSnack}>Buy {snack}</button>\r\n        <Link to='/'>Back</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Snack;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Special = () => {\r\n  return (\r\n    <div>\r\n      <h2>Special</h2>\r\n      <iframe\r\n        width='560'\r\n        height='315'\r\n        src='https://www.youtube.com/embed/6PQM1nqlJKI'\r\n        frameborder='0'\r\n        allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'\r\n        allowfullscreen\r\n      ></iframe>\r\n      <div>\r\n        <Link to='/'>Back</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Special;\r\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport VendingMachine from './VendingMachine';\nimport Snack from './Snack';\n\nimport Special from './Special';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <BrowserRouter>\n        <Navbar />\n        <Route exact path='/'>\n          <VendingMachine />\n        </Route>\n        <Route exact path='/bento'>\n          <Snack snack='Bento' snackIcon='🍱' />\n        </Route>\n        <Route exact path='/onigiri'>\n          <Snack snack='Onigiri' snackIcon='🍙' />\n        </Route>\n        <Route exact path='/ramen'>\n          <Snack snack='Ramem' snackIcon='🍜' />\n        </Route>\n        <Route exact path='/narutomaki'>\n          <Snack snack='Narutomaki' snackIcon='🍥' />\n        </Route>\n        <Route exact path='/special'>\n          <Special />\n        </Route>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}